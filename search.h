/* 
 * factorial.h - the declaration of factorial functions.
 * 
 * DO NOT EDIT THIS FILE.
 */
#ifndef _SEARCH_H
#define _SEARCH_H

/* 
 * linearsearch - an iterative implementation of a function to perform a 
 * linear search of an int array for a given value. See the README.txt file
 * for a description of linear search (in the Further Information section).
 * The function returns the index position of the value if it is found, 
 * and -1 if it is not found.
 * 
 * Usage:
 *      int arr[] = { 1, 0, 4, 3, 6};
 *      int idx = linearsearch(4, arr, 5);  // search for 4 in array arr of 
 *                                          // length 5. idx will be 2 in 
 *                                          // this example.
 * 
 * Parameters:
 * x - the value to search for
 * arr - the array to search
 * n - the length of the array (number of items in the array)
 * 
 * Return values:
 * If the value x is in the array, the function returns its index position. If 
 * it is not found, the function return -1. 
 * If arr is NULL or n is less than 0, the function returns -1 and the global
 * errno is set to indicate the error.
 *
 * Errors:
 * If arr is NULL or n is less than 0, errno is set to EINVAL for invald 
 * argument.
 *
 * Note: EINVAL is the constant 22.
 */
int linearsearch(int x, int arr[], int n);

/* 
 * rlinearsearch - an recursive implementation of a function to perform a 
 * linear search of an int array for a given value. See the README.txt file
 * for a description of linear search (in the Further Information section).
 * The function  returns the index position of the value if it is found, 
 * and -1 if it is not found.
 *
 * Note: this linear search solution uses recursion.
 * 
 * Usage:
 *      int arr[] = { 1, 0, 4, 3, 6};
 *      int idx = rlinearsearch(4, arr, 5, 0);  // search for 4 in array arr of 
 *                                              // length 5 starting at index
 *                                              // position 0. 
 *                                              // idx will be 2 in this
 *                                              // example.
 * 
 * Parameters:
 * x - the value to search for
 * arr - the array to search
 * n - the length of the array (number of items in the array)
 * i - the current index position for each recursive step (i starts with 0)
 * 
 * Return values:
 * If the value x is in the array, the function returns its index position. If 
 * it is not found, the function return -1. 
 * If arr is NULL or n or i is less than 0, the function returns -1 and the
 * global errno is set to indicate the error.
 *
 * Errors:
 * If arr is NULL or n or i is less than 0, errno is set to EINVAL for invald 
 * argument.
 *
 * Note: EINVAL is the constant 22.
 */
int rlinearsearch(int x, int arr[], int n, int i);

/* 
 * slinearsearch - an iterative implementation of a function to perform a 
 * sentinel linear search of an int array for a given value. See the 
 * README.txt file for a description of sentinal linear search (in the Further
 * Information section).
 * The function returns the index position of the value if it is found, 
 * and -1 if it is not found.
 * 
 * Usage:
 *      int arr[] = { 1, 0, 4, 3, 6};
 *      int idx = slinearsearch(4, arr, 5); // search for 4 in array arr of 
 *                                          // length 5. idx will be 2 in 
 *                                          // this example.
 * 
 * Parameters:
 * x - the value to search for
 * arr - the array to search
 * n - the length of the array (number of items in the array)
 * 
 * Return values:
 * If the value x is in the array, the function returns its index position. If 
 * it is not found, the function return -1. 
 * If arr is NULL or n is less than 0, the function returns -1 and the global
 * errno is set to indicate the error.
 *
 * Errors:
 * If arr is NULL or n is less than 0, errno is set to EINVAL for invald 
 * argument.
 *
 * Note: EINVAL is the constant 22.
 */
int slinearsearch(int x, int arr[], int n);

/* 
 * binarysearch - an iterative implementation of a function to perform a 
 * binary search of an ordered int array for a given value. See the 
 * README.txt file for a description of binary search (in the Further
 * Information section).
 * The function returns the index position of the value if it is found, 
 * and -1 if it is not found.
 * 
 * Usage:
 *      int arr[] = { 1, 2, 3, 4, 6};
 *      int idx = binary(4, arr, 5);        // search for 4 in array arr of 
 *                                          // length 5. idx will be 3 in 
 *                                          // this example.
 * 
 * Parameters:
 * x - the value to search for
 * arr - the array to search with items in ascending order
 * n - the length of the array (number of items in the array)
 * 
 * Return values:
 * If the value x is in the array, the function returns its index position. If 
 * it is not found, the function return -1. 
 * If arr is NULL or n is less than 0, the function returns -1 and the global
 * errno is set to indicate the error.
 *
 * Errors:
 * If arr is NULL or n is less than 0, errno is set to EINVAL for invald 
 * argument.
 *
 * Note: EINVAL is the constant 22.
 */
int binarysearch(int x, int arr[], int n);

/* 
 * binarysearch - a recursive implementation of a function to perform a 
 * binary search of an ordered int array for a given value. See the 
 * README.txt file for a description of binary search (in the Further
 * Information section).
 * The function returns the index position of the value if it is found, 
 * and -1 if it is not found.
 * 
 * Usage:
 *      int arr[] = { 1, 2, 3, 4, 6};
 *      int idx = binary(4, arr, 0, 4);     // search for 4 in array arr of 
 *                                          // length 5. idx will be 3 in 
 *                                          // this example.
 * 
 * Parameters:
 * x - the value to search for
 * arr - the array to search with items in ascending order
 * li - the current low index of the subarray to search (0 to start)
 * hi - the current high index of the subarray to search (n - 1 to start, 
 * where n is the length of  the array)
 * 
 * Return values:
 * If the value x is in the array, the function returns its index position. If 
 * it is not found, the function return -1. 
 * If arr is NULL or li is less than 0, the function returns -1 and the global
 * errno is set to indicate the error.
 *
 * Errors:
 * If arr is NULL or li is less than 0, errno is set to EINVAL for invald 
 * argument.
 *
 * Note: EINVAL is the constant 22.
 */
int rbinarysearch(int x, int arr[], int li, int hi);

#endif